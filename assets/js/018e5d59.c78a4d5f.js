"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[141],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return p}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),f=u(n),p=a,g=f["".concat(l,".").concat(p)]||f[p]||m[p]||o;return n?r.createElement(g,i(i({ref:t},c),{},{components:n})):r.createElement(g,i({ref:t},c))}));function p(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=f;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},8215:function(e,t,n){var r=n(7294);t.Z=function(e){var t=e.children,n=e.hidden,a=e.className;return r.createElement("div",{role:"tabpanel",hidden:n,className:a},t)}},6396:function(e,t,n){n.d(t,{Z:function(){return f}});var r=n(7462),a=n(7294),o=n(2389),i=n(9443);var s=function(){var e=(0,a.useContext)(i.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},l=n(3616),u=n(6010),c="tabItem_vU9c";function m(e){var t,n,o,i=e.lazy,m=e.block,f=e.defaultValue,p=e.values,g=e.groupId,d=e.className,h=a.Children.map(e.children,(function(e){if((0,a.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),b=null!=p?p:h.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),v=(0,l.lx)(b,(function(e,t){return e.value===t.value}));if(v.length>0)throw new Error('Docusaurus error: Duplicate values "'+v.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var _=null===f?f:null!=(t=null!=f?f:null==(n=h.find((function(e){return e.props.default})))?void 0:n.props.value)?t:null==(o=h[0])?void 0:o.props.value;if(null!==_&&!b.some((function(e){return e.value===_})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+_+'" but none of its children has the corresponding value. Available values are: '+b.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var k=s(),y=k.tabGroupChoices,C=k.setTabGroupChoices,T=(0,a.useState)(_),N=T[0],w=T[1],x=[],E=(0,l.o5)().blockElementScrollPositionUntilNextRender;if(null!=g){var O=y[g];null!=O&&O!==N&&b.some((function(e){return e.value===O}))&&w(O)}var I=function(e){var t=e.currentTarget,n=x.indexOf(t),r=b[n].value;r!==N&&(E(t),w(r),null!=g&&C(g,r))},S=function(e){var t,n=null;switch(e.key){case"ArrowRight":var r=x.indexOf(e.currentTarget)+1;n=x[r]||x[0];break;case"ArrowLeft":var a=x.indexOf(e.currentTarget)-1;n=x[a]||x[x.length-1]}null==(t=n)||t.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,u.Z)("tabs",{"tabs--block":m},d)},b.map((function(e){var t=e.value,n=e.label,o=e.attributes;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:N===t?0:-1,"aria-selected":N===t,key:t,ref:function(e){return x.push(e)},onKeyDown:S,onFocus:I,onClick:I},o,{className:(0,u.Z)("tabs__item",c,null==o?void 0:o.className,{"tabs__item--active":N===t})}),null!=n?n:t)}))),i?(0,a.cloneElement)(h.filter((function(e){return e.props.value===N}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},h.map((function(e,t){return(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==N})}))))}function f(e){var t=(0,o.Z)();return a.createElement(m,(0,r.Z)({key:String(t)},e))}},4980:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return u},contentTitle:function(){return c},metadata:function(){return m},toc:function(){return f},default:function(){return g}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=n(6396),s=n(8215),l=["components"],u={sidebar_position:2},c="EstimatorConfig",m={unversionedId:"configuring-experiments/estimator-config",id:"configuring-experiments/estimator-config",title:"EstimatorConfig",description:"Both feature rankers and validators are defined using the EstimatorConfig. The config for both is like below:",source:"@site/docs/configuring-experiments/estimator-config.mdx",sourceDirName:"configuring-experiments",slug:"/configuring-experiments/estimator-config",permalink:"/fseval/docs/configuring-experiments/estimator-config",editUrl:"https://github.com/dunnkers/fseval/tree/website/docs/configuring-experiments/estimator-config.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"DatasetConfig",permalink:"/fseval/docs/configuring-experiments/dataset-config"},next:{title:"CrossValidatorConfig",permalink:"/fseval/docs/configuring-experiments/cross-validator-config"}},f=[],p={toc:f};function g(e){var t=e.components,n=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"estimatorconfig"},"EstimatorConfig"),(0,o.kt)("p",null,"Both feature rankers and validators are defined using the ",(0,o.kt)("inlineCode",{parentName:"p"},"EstimatorConfig"),". The config for both is like below:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'@dataclass\nclass EstimatorConfig:\n    """\n    Configures an estimator: a Feature Ranker, Feature Selector or a validation \n    estimator. In the case of Feature Rankers/Selectors, set one of \n    `estimates_feature_importances`, `estimates_feature_support` or  \n    `estimates_feature_ranking` to True. In the case of a validation estimator,\n    set `estimates_target` to True.\n\n    Attributes:\n        name (str): Human-friendly name of this estimator.\n        estimator (Any): The estimator. Must be a dictionary with a key `_target_`, \n            pointing to the class that is to be instantiated. All other properties in \n            the dictionary will be passed to the estimator constructor. e.g.:\n            `_target_="sklearn.tree.DecisionTreeClassifier, max_depth=10)`\n        load_cache (Optional[CacheUsage]): How to handle loading a cached version of the\n            estimator, in a pickle file. e.g. to ignore cache, or force using it. \n            To be used in combination with `PipelineConfig.storage`. See `CacheUsage`.\n        save_cache (Optional[CacheUsage]): How to handle saving the fit estimator as a \n            pickle file, such to facilitate caching. To be used in combination with \n            `PipelineConfig.storage`. See `CacheUsage`.\n        _estimator_type (str): Either \'classifier\', \'regressor\' or \'clusterer\'.\n        multioutput (bool): Whether this estimator supports multioutput datasets.\n        multioutput_only (bool): If this estimator **only** supports multioutput \n            datasets.\n        requires_positive_X (bool): Whether the estimator fails if X contains negative \n            values.\n        estimates_feature_importances (bool): Whether the estimator estimates feature\n            importances. For example, in the case of 2 features, the estimator can set \n            `self.feature_importances_ = [0.9, 0.1]`, implying the estimator\n            found the first feature the most useful. Alternatively, the `coef_` \n            attribute can also be read and interpreted as a feature importance vector.\n        estimates_feature_support (bool): Whether the estimator estimates feature \n            support. A feature support vector indicates which features to include in a \n            feature subset yes/no. In other words, it must be a boolean vector. It is \n            to be set on the estimator `support_` attribute. Estimating the feature \n            support vector is synonymous with performing feature selection. e.g.:\n            `self.support_ = [True, False]`, meaning to include only the first feature\n            in a feature subset.\n        estimates_feature_ranking (bool): Whether the estimator ranks the features in a\n            specific order. Is similar to feature importance, but does not estimate \n            exact importance quantities, i.e. that are proportional to each other. An\n            estimator can set the ranking using the `ranking_` attribute. e.g.:\n            `self.ranking_ = [1, 0]`, such to indicate that the first feature ranks the\n            highest.\n    """\n    name: str = MISSING\n    estimator: Any = None\n    load_cache: Optional[CacheUsage] = CacheUsage.allow\n    save_cache: Optional[CacheUsage] = CacheUsage.allow\n    # tags\n    _estimator_type: str = MISSING  # \'classifier\', \'regressor\' or \'clusterer\'\n    multioutput: bool = False\n    multioutput_only: bool = False\n    requires_positive_X: bool = False\n    estimates_feature_importances: bool = False\n    estimates_feature_support: bool = False\n    estimates_feature_ranking: bool = False\n    estimates_target: bool = False\n    # runtime properties. do not override these.\n    task: Task = II("dataset.task")\n    is_multioutput_dataset: bool = II("dataset.multioutput")\n\n    # required for instantiation\n    _target_: str = "fseval.pipeline.estimator.Estimator"\n')),(0,o.kt)("p",null,"Example config for ReliefF feature selection using ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/EpistasisLab/scikit-rebate"},"skrebate"),":"),(0,o.kt)(i.Z,{groupId:"config-representation",mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"yaml",label:"YAML",default:!0,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="conf/ranker/relieff.yaml"',title:'"conf/ranker/relieff.yaml"'},"name: ReliefF\nestimator:\n  _target_: skrebate.ReliefF\n_estimator_type: classifier\nestimates_feature_importances: true\n"))),(0,o.kt)(s.Z,{value:"structured",label:"Structured Config",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from hydra.core.config_store import ConfigStore\nfrom fseval.config import EstimatorConfig\n\ncs = ConfigStore.instance()\n\nrelieff = EstimatorConfig(\n    name="ReliefF",\n    estimator=dict(\n        _target_="skrebate.ReliefF"\n    ),\n    _estimator_type="classifier",\n    estimates_feature_importances=True,\n)\ncs.store(group="ranker", name="relieff", node=relieff)\n')))),(0,o.kt)("p",null,"Example config for Boruta using ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/scikit-learn-contrib/boruta_py"},"boruta_py"),":"),(0,o.kt)(i.Z,{groupId:"config-representation",mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"yaml",label:"YAML",default:!0,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="conf/ranker/boruta.yaml"',title:'"conf/ranker/boruta.yaml"'},"name: Boruta\nestimator:\n  _target_: boruta.boruta_py.BorutaPy\n  estimator:\n    _target_: sklearn.ensemble.RandomForestClassifier\n  n_estimators: auto\n_estimator_type: classifier\nmultioutput: false\nestimates_feature_importances: false\nestimates_feature_support: true\nestimates_feature_ranking: true\n"))),(0,o.kt)(s.Z,{value:"structured",label:"Structured Config",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from hydra.core.config_store import ConfigStore\nfrom fseval.config import EstimatorConfig\n\ncs = ConfigStore.instance()\n\nboruta = EstimatorConfig(\n    name="Boruta",\n    estimator=dict(\n        _target_="boruta.boruta_py.BorutaPy",\n        estimator=dict(\n            _target_="sklearn.ensemble.RandomForestClassifier"\n        ),\n        n_estimators="auto"\n    ),\n    _estimator_type="classifier",\n    multioutput=False,\n    estimates_feature_importances=False,\n    estimates_feature_support=True,\n    estimates_feature_ranking=True,\n)\ncs.store(group="ranker", name="boruta", node=boruta)\n')))),(0,o.kt)("p",null,"Example config for a validation estimator, e.g. ",(0,o.kt)("a",{parentName:"p",href:"https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.KNeighborsClassifier.html"},"k-NN"),":"),(0,o.kt)(i.Z,{groupId:"config-representation",mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"yaml",label:"YAML",default:!0,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="conf/validator/knn.yaml"',title:'"conf/validator/knn.yaml"'},"name: k-NN\nestimator:\n  _target_: sklearn.neighbors.KNeighborsClassifier\n_estimator_type: classifier\nmultioutput: false\nestimates_target: true\n"))),(0,o.kt)(s.Z,{value:"structured",label:"Structured Config",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from hydra.core.config_store import ConfigStore\nfrom fseval.config import EstimatorConfig\n\ncs = ConfigStore.instance()\n\nknn = EstimatorConfig(\n    name="k-NN",\n    estimator=dict(\n        _target_="sklearn.neighbors.KNeighborsClassifier",\n    ),\n    _estimator_type="classifier",\n    multioutput=False,\n    estimates_target=True,\n)\ncs.store(group="ranker", name="knn", node=knn)\n')))),(0,o.kt)("p",null,"\u2192 See more example definitions of ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/dunnkers/fseval/tree/master/tests/integration/conf/ranker"},"rankers")," and ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/dunnkers/fseval/tree/master/tests/integration/conf/validator"},"validators")," in the repository."))}g.isMDXComponent=!0}}]);