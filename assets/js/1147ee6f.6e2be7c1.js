"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[930],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),d=i,g=u["".concat(l,".").concat(d)]||u[d]||f[d]||o;return n?r.createElement(g,a(a({ref:t},c),{},{components:n})):r.createElement(g,a({ref:t},c))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var p=2;p<o;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2741:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return c},default:function(){return u}});var r=n(7462),i=n(3366),o=(n(7294),n(3905)),a=["components"],s={sidebar_position:0},l="PipelineConfig",p={unversionedId:"configuring-experiments/pipeline-config",id:"configuring-experiments/pipeline-config",title:"PipelineConfig",description:"All the pipeline needs to run is a well-defined configuration. The requirement is that whatever is passed into run_pipeline is a PipelineConfig object.",source:"@site/docs/configuring-experiments/pipeline-config.md",sourceDirName:"configuring-experiments",slug:"/configuring-experiments/pipeline-config",permalink:"/fseval/docs/configuring-experiments/pipeline-config",editUrl:"https://github.com/dunnkers/fseval/tree/website/docs/configuring-experiments/pipeline-config.md",tags:[],version:"current",sidebarPosition:0,frontMatter:{sidebar_position:0},sidebar:"tutorialSidebar",previous:{title:"The pipeline",permalink:"/fseval/docs/the-pipeline"},next:{title:"DatasetConfig",permalink:"/fseval/docs/configuring-experiments/dataset-config"}},c=[{value:"Using YAML files",id:"using-yaml-files",children:[],level:2}],f={toc:c};function u(e){var t=e.components,n=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"pipelineconfig"},"PipelineConfig"),(0,o.kt)("p",null,"All the pipeline needs to run is a well-defined configuration. The requirement is that whatever is passed into ",(0,o.kt)("a",{parentName:"p",href:"/docs/running-experiments/running-first-experiment"},(0,o.kt)("inlineCode",{parentName:"a"},"run_pipeline"))," is a ",(0,o.kt)("inlineCode",{parentName:"p"},"PipelineConfig")," object."),(0,o.kt)("p",null,"The complete pipeline configuration is as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'@dataclass\nclass PipelineConfig:\n    """\n    The complete configuration needed to run the fseval pipeline.\n\n    Attributes:\n        dataset (DatasetConfig): Determines the dataset to use for this experiment.\n        ranker (EstimatorConfig): A Feature Ranker or Feature Selector.\n        validator (EstimatorConfig): Some estimator to validate the feature subsets.\n        cv (CrossValidatorConfig): The CV method and split to use in this experiment.\n        resample (ResampleConfig): Dataset resampling; e.g. with or without replacement.\n        storage (StorageConfig): A storage method used to store the fit estimators.\n        callbacks (Dict[str, Any]): Callbacks. Provide hooks for storing the config or results.\n        metrics (Dict[str, Any]): Metrics allow custom computation after any pipeline stage.\n        n_bootstraps (int): Amount of \'bootstraps\' to run. A bootstrap means running the pipeline\n            again but with a resampled (see `resample`) version of the dataset. This allows estimating\n            stability, for example.\n        n_jobs (Optional[int]): Amount of CPU\'s to use for computing each bootstrap. This thus\n            distributes the amount of bootstraps over CPU\'s.\n        all_features_to_select (str): Once the ranker has been fit, this determines the feature\n            subsets to validate. By default, at most 50 subsets containing the highest ranked\n            features are validated.\n    """\n\n    dataset: DatasetConfig = MISSING\n    ranker: EstimatorConfig = MISSING\n    validator: EstimatorConfig = MISSING\n    cv: CrossValidatorConfig = MISSING\n    resample: ResampleConfig = MISSING\n    storage: StorageConfig = MISSING\n    callbacks: Dict[str, Any] = field(default_factory=lambda: {})\n    metrics: Dict[str, Any] = field(default_factory=lambda: {})\n    n_bootstraps: int = 1\n    n_jobs: Optional[int] = 1\n    all_features_to_select: str = "range(1, min(50, p) + 1)"\n\n    # default values for the above.\n    defaults: List[Any] = field(\n        default_factory=lambda: [\n            "_self_",\n            {"dataset": MISSING},\n            {"ranker": MISSING},\n            {"validator": MISSING},\n            {"cv": "kfold"},\n            {"storage": "local"},\n            {"resample": "shuffle"},\n            {"callbacks": ["to_sql"]},\n            {"metrics": ["feature_importances", "ranking_scores", "validation_scores"]},\n            {"override hydra/job_logging": "colorlog"},\n            {"override hydra/hydra_logging": "colorlog"},\n        ]\n    )\n\n    # required for instantiation\n    _target_: str = "fseval.pipelines.rank_and_validate.BootstrappedRankAndValidate"\n')),(0,o.kt)("h2",{id:""}),(0,o.kt)("p",null,"Experiments can be configured in two ways."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Using ",(0,o.kt)("strong",{parentName:"li"},"YAML")," files stored in a directory"),(0,o.kt)("li",{parentName:"ol"},"Using ",(0,o.kt)("strong",{parentName:"li"},"Python")," (",(0,o.kt)("a",{parentName:"li",href:"https://hydra.cc/docs/tutorials/structured_config/intro/"},"Structured Configs")," in Hydra)")),(0,o.kt)("h2",{id:"using-yaml-files"},"Using YAML files"),(0,o.kt)("p",null,"..."))}u.isMDXComponent=!0}}]);