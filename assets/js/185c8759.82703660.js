"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[446],{8215:function(e,a,t){var n=t(7294);a.Z=function(e){var a=e.children,t=e.hidden,s=e.className;return n.createElement("div",{role:"tabpanel",hidden:t,className:s},a)}},6396:function(e,a,t){t.d(a,{Z:function(){return p}});var n=t(7462),s=t(7294),r=t(2389),l=t(9443);var i=function(){var e=(0,s.useContext)(l.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},o=t(3616),d=t(6010),u="tabItem_vU9c";function c(e){var a,t,r,l=e.lazy,c=e.block,p=e.defaultValue,m=e.values,f=e.groupId,g=e.className,h=s.Children.map(e.children,(function(e){if((0,s.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),k=null!=m?m:h.map((function(e){var a=e.props;return{value:a.value,label:a.label,attributes:a.attributes}})),v=(0,o.lx)(k,(function(e,a){return e.value===a.value}));if(v.length>0)throw new Error('Docusaurus error: Duplicate values "'+v.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var b=null===p?p:null!=(a=null!=p?p:null==(t=h.find((function(e){return e.props.default})))?void 0:t.props.value)?a:null==(r=h[0])?void 0:r.props.value;if(null!==b&&!k.some((function(e){return e.value===b})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+b+'" but none of its children has the corresponding value. Available values are: '+k.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var y=i(),_=y.tabGroupChoices,N=y.setTabGroupChoices,w=(0,s.useState)(b),T=w[0],x=w[1],C=[],I=(0,o.o5)().blockElementScrollPositionUntilNextRender;if(null!=f){var D=_[f];null!=D&&D!==T&&k.some((function(e){return e.value===D}))&&x(D)}var M=function(e){var a=e.currentTarget,t=C.indexOf(a),n=k[t].value;n!==T&&(I(a),x(n),null!=f&&N(f,n))},S=function(e){var a,t=null;switch(e.key){case"ArrowRight":var n=C.indexOf(e.currentTarget)+1;t=C[n]||C[0];break;case"ArrowLeft":var s=C.indexOf(e.currentTarget)-1;t=C[s]||C[C.length-1]}null==(a=t)||a.focus()};return s.createElement("div",{className:"tabs-container"},s.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,d.Z)("tabs",{"tabs--block":c},g)},k.map((function(e){var a=e.value,t=e.label,r=e.attributes;return s.createElement("li",(0,n.Z)({role:"tab",tabIndex:T===a?0:-1,"aria-selected":T===a,key:a,ref:function(e){return C.push(e)},onKeyDown:S,onFocus:M,onClick:M},r,{className:(0,d.Z)("tabs__item",u,null==r?void 0:r.className,{"tabs__item--active":T===a})}),null!=t?t:a)}))),l?(0,s.cloneElement)(h.filter((function(e){return e.props.value===T}))[0],{className:"margin-vert--md"}):s.createElement("div",{className:"margin-vert--md"},h.map((function(e,a){return(0,s.cloneElement)(e,{key:a,hidden:e.props.value!==T})}))))}function p(e){var a=(0,r.Z)();return s.createElement(c,(0,n.Z)({key:String(a)},e))}},3259:function(e,a,t){t.r(a),t.d(a,{contentTitle:function(){return c},default:function(){return g},frontMatter:function(){return u},metadata:function(){return p},toc:function(){return m}});var n=t(7462),s=t(3366),r=(t(7294),t(3905)),l=t(6396),i=t(8215),o=t(9055),d=["components"],u={sidebar_position:1},c="DatasetConfig",p={unversionedId:"configuring-experiments/dataset-config",id:"configuring-experiments/dataset-config",title:"DatasetConfig",description:"Datasets can be loaded with well-defined dataset configs. The dataset config looks as follows:",source:"@site/docs/configuring-experiments/dataset-config.mdx",sourceDirName:"configuring-experiments",slug:"/configuring-experiments/dataset-config",permalink:"/fseval/docs/configuring-experiments/dataset-config",editUrl:"https://github.com/dunnkers/fseval/tree/website/docs/configuring-experiments/dataset-config.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"PipelineConfig",permalink:"/fseval/docs/configuring-experiments/pipeline-config"},next:{title:"EstimatorConfig",permalink:"/fseval/docs/configuring-experiments/estimator-config"}},m=[{value:"Available adapters",id:"available-adapters",children:[{value:"OpenML",id:"openml",children:[],level:3},{value:"Weights and Biases",id:"weights-and-biases",children:[],level:3}],level:2},{value:"\u2699\ufe0f Custom Adapters",id:"\ufe0f-custom-adapters",children:[],level:2},{value:"Example configs",id:"example-configs",children:[],level:2}],f={toc:m};function g(e){var a=e.components,t=(0,s.Z)(e,d);return(0,r.kt)("wrapper",(0,n.Z)({},f,t,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"datasetconfig"},"DatasetConfig"),(0,r.kt)("p",null,"Datasets can be loaded with well-defined dataset configs. The dataset config looks as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'@dataclass\nclass DatasetConfig:\n    """\n    Attributes:\n        name (str): human-readable name of dataset.\n        task (Task): either Task.classification or Task.regression.\n        adapter: dataset adapter. must be of fseval.types.AbstractAdapter type,\n            i.e. must implement a get_data() -> (X, y) method. Can also be a callable;\n            then the callable must return a tuple (X, y).\n        adapter_callable: adapter class callable. the function to be called on the\n            instantiated class to fetch the data (X, y). is ignored when the target\n            itself is a function callable.\n        feature_importances (Optional[Dict[str, float]]): weightings indicating relevant\n            features or instances. should be a dict with each key and value like the\n            following pattern:\n                X[<numpy selector>] = <float>\n            Example:\n                X[:, 0:3] = 1.0\n            which sets the 0-3 features as maximally relevant and all others\n            minimally relevant.\n        group (Optional[str]): an optional group attribute, such to group datasets in\n            the analytics stage.\n        domain (Optional[str]): dataset domain, e.g. medicine, finance, etc.\n    """\n\n    name: str = MISSING\n    task: Task = MISSING\n    adapter: Any = MISSING\n    adapter_callable: str = "get_data"\n    feature_importances: Optional[Dict[str, float]] = None\n    # optional tags\n    group: Optional[str] = None\n    domain: Optional[str] = None\n    # runtime properties: will be set once dataset is loaded, no need to configure them.\n    n: Optional[int] = None\n    p: Optional[int] = None\n    multioutput: Optional[bool] = None\n\n    # required for instantiation\n    _target_: str = "fseval.pipeline.dataset.DatasetLoader"\n    _recursive_: bool = False  # prevent adapter from getting initialized\n')),(0,r.kt)("h2",{id:"available-adapters"},"Available adapters"),(0,r.kt)("p",null,"Built-in, the following adapters are available."),(0,r.kt)("h3",{id:"openml"},"OpenML"),(0,r.kt)("p",null,"To load datasets from ",(0,r.kt)("a",{parentName:"p",href:"https://www.openml.org/"},"OpenML"),", use the ",(0,r.kt)("inlineCode",{parentName:"p"},"fseval.adapters.openml.OpenML")," adapter."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'@dataclass\nclass OpenMLDataset:\n    _target_: str = "fseval.adapters.openml.OpenML"\n    dataset_id: int = MISSING\n    target_column: str = MISSING\n    drop_qualitative: bool = False\n')),(0,r.kt)("p",null,"So, for example, loading the ",(0,r.kt)("a",{parentName:"p",href:"https://www.openml.org/d/61"},"Iris")," dataset:"),(0,r.kt)(l.Z,{groupId:"config-representation",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"yaml",label:"YAML",default:!0,mdxType:"TabItem"},(0,r.kt)(o.Z,{className:"language-yaml",title:"conf/dataset/iris.yaml",mdxType:"CodeBlock"},"name: Iris Flowers\ntask: classification\ndomain: nature\nadapter:\n  _target_: fseval.adapters.openml.OpenML\n  dataset_id: 61\n  target_column: class\n  drop_qualitative: true"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="conf/dataset/iris.yaml"',title:'"conf/dataset/iris.yaml"'},"name: Iris Flowers\ntask: classification\nadapter:\n    _target_: fseval.adapters.openml.OpenML\n    dataset_id: 61\n    target_column: class\n"))),(0,r.kt)(i.Z,{value:"structured",label:"Structured Config",mdxType:"TabItem"},(0,r.kt)("p",null,"Any dataset can also be configured using Python code. Like so:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from hydra.core.config_store import ConfigStore\nfrom fseval.config import DatasetConfig\nfrom fseval.types import Task\nfrom fseval.adapters.openml import OpenMLDataset\n\ncs = ConfigStore.instance()\n\ncs.store(\n    group="dataset",\n    name="iris",\n    node=DatasetConfig(\n        name="Iris Flowers",\n        task=Task.classification,\n        adapter=OpenMLDataset(dataset_id=61, target_column="class"),\n    ),\n)\n')))),(0,r.kt)("h3",{id:"weights-and-biases"},"Weights and Biases"),(0,r.kt)("p",null,"To load a dataset from ",(0,r.kt)("a",{parentName:"p",href:"https://wandb.ai/"},"Weights and Biases")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.wandb.ai/guides/artifacts"},"artifacts"),", use the ",(0,r.kt)("inlineCode",{parentName:"p"},"fseval.adapters.wandb.Wandb")," adapter."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'@dataclass\nclass WandbDataset:\n    _target_: str = "fseval.adapters.wandb.Wandb"\n    artifact_id: str = MISSING\n')),(0,r.kt)("p",null,"So, for example, loading a dataset from wandb:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="conf/dataset/chen.yaml"',title:'"conf/dataset/chen.yaml"'},"name: Switch (Chen et al.)\ntask: regression\nadapter:\n  _target_: benchmark.WandbAdapter\n  artifact_id: dunnkers/synthetic-datasets/switch:v0\nfeature_importances:\n  X[:5000, 0:4]: 1.0\n  X[5000:, 4:8]: 1.0\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Note: ",(0,r.kt)("inlineCode",{parentName:"p"},"feature_importances")," indicates the ground truth relevant features in the dataset.")),(0,r.kt)("h2",{id:"\ufe0f-custom-adapters"},"\u2699\ufe0f Custom Adapters"),(0,r.kt)("p",null,"To load datasets from different sources, we can use different ",(0,r.kt)("strong",{parentName:"p"},"adapters"),". You can create an adapter by implementing this interface:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class AbstractAdapter(ABC, BaseEstimator):\n    @abstractmethod\n    def get_data(self) -> Tuple[List, List]:\n        ...\n")),(0,r.kt)("p",null,"For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="benchmark.py"',title:'"benchmark.py"'},"@dataclass\nclass CustomAdapter(AbstractAdapter):\n    def get_data(self) -> Tuple[List, List]:\n        X = [[]]\n        Y = []\n\n        return X, Y\n")),(0,r.kt)("h2",{id:"example-configs"},"Example configs"),(0,r.kt)("p",null,"We can also use ",(0,r.kt)("em",{parentName:"p"},"functions")," as adapters, as long as they return a tuple ",(0,r.kt)("inlineCode",{parentName:"p"},"(X, y)"),". e.g. using ",(0,r.kt)("inlineCode",{parentName:"p"},"sklearn.datasets.make_classification")," as an adapter:"),(0,r.kt)(l.Z,{groupId:"config-representation",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"yaml",label:"YAML",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="conf/dataset/synthetic_dataset.yaml"',title:'"conf/dataset/synthetic_dataset.yaml"'},"name: My synthetic dataset\ntask: classification\nadapter:\n  _target_: sklearn.datasets.make_classification\n  n_samples: 10000\n  n_informative: 2\n  n_classes: 2\n  n_features: 20\n  n_redundant: 0\n  random_state: 0\n  shuffle: false\nfeature_importances:\n  X[:, 0:2]: 1.0\n"))),(0,r.kt)(i.Z,{value:"structured",label:"Structured Config",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from hydra.core.config_store import ConfigStore\nfrom fseval.config import DatasetConfig\nfrom fseval.types import Task\nfrom fseval.adapters.openml import OpenMLDataset\n\ncs = ConfigStore.instance()\n\ncs.store(\n    group="dataset",\n    name="synthetic_dataset",\n    node=DatasetConfig(\n        name="My synthetic dataset",\n        task=Task.classification,\n        adapter=dict(\n            _target_="sklearn.datasets.make_classification",\n            n_samples=10000,\n            n_informative=2,\n            n_classes=2,\n            n_features=20,\n            n_redundant=0,\n            random_state=0,\n            shuffle=False,\n        ),\n        feature_importances={\n            "X[:, 0:2]": 1.0\n        }\n    ),\n)\n')))),(0,r.kt)("p",null,"For more examples, see the repo for more ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/dunnkers/fseval/tree/master/tests/integration/conf/dataset"},"dataset configs"),"."))}g.isMDXComponent=!0}}]);